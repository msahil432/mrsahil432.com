(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng2-adsense', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng2-adsense'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ ADSENSE_TOKEN = new core.InjectionToken('AdsenseConfig');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AdsenseComponent = (function () {
        function AdsenseComponent(config) {
            this.config = config;
            /**
             * can be manually set if you need all ads on a page to have same id page-xxx
             */
            this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
        }
        /**
         * @return {?}
         */
        AdsenseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ config = this.config;
                /**
                 * @template T
                 * @param {?} source
                 * @param {?} defaultValue
                 * @return {?}
                 */
                function use(source, defaultValue) {
                    return config && source !== undefined ? source : defaultValue;
                }
                this.adClient = use(this.adClient, config.adClient);
                this.adSlot = use(this.adSlot, config.adSlot);
                this.adFormat = use(this.adFormat, config.adFormat || 'auto');
                this.display = use(this.display, config.display || 'block');
                this.width = use(this.width, config.width);
                this.height = use(this.height, config.height);
                this.layout = use(this.layout, config.layout);
                this.layoutKey = use(this.layoutKey, config.layoutKey);
                this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);
                this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);
                this.adtest = use(this.adtest, config.adtest);
            };
        /**
         * @return {?}
         */
        AdsenseComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ iframe = this.ins.nativeElement.querySelector('iframe');
                if (iframe && iframe.contentWindow) {
                    iframe.src = 'about:blank';
                    iframe.remove();
                }
            };
        /**
         * attempts to push the ad twice. Usually if one doesn't work the other
         * will depeding on if the browser has the adsense code cached and
         * if its the first page to be loaded
         */
        /**
         * attempts to push the ad twice. Usually if one doesn't work the other
         * will depeding on if the browser has the adsense code cached and
         * if its the first page to be loaded
         * @return {?}
         */
        AdsenseComponent.prototype.ngAfterViewInit = /**
         * attempts to push the ad twice. Usually if one doesn't work the other
         * will depeding on if the browser has the adsense code cached and
         * if its the first page to be loaded
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ res = this.push();
                if (res instanceof TypeError) {
                    setTimeout(function () { return _this.push(); }, this.timeOutRetry);
                }
            };
        /**
         * @return {?}
         */
        AdsenseComponent.prototype.push = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ p = {};
                if (this.pageLevelAds) {
                    p.google_ad_client = this.adClient;
                    p.enable_page_level_ads = true;
                }
                try {
                    var /** @type {?} */ adsbygoogle = window['adsbygoogle'];
                    adsbygoogle.push(p);
                    return true;
                }
                catch (e) {
                    return e;
                }
            };
        AdsenseComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng2-adsense,ng-adsense',
                        template: "\n  <ins #ins class=\"adsbygoogle\"\n    [ngStyle]=\"{'display': display, 'width.px': width, 'height.px': height }\"\n    [attr.data-ad-client]=\"adClient\"\n    [attr.data-ad-slot]=\"adSlot\"\n    [attr.data-ad-format]=\"adFormat\"\n    [attr.data-ad-region]=\"adRegion\"\n    [attr.data-layout]=\"layout\"\n    [attr.data-adtest]=\"adtest\"\n    [attr.data-layout-key]=\"layoutKey\">\n  </ins>\n  ",
                        preserveWhitespaces: false,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        AdsenseComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [ADSENSE_TOKEN,] },] },
            ];
        };
        AdsenseComponent.propDecorators = {
            "adClient": [{ type: core.Input },],
            "adSlot": [{ type: core.Input },],
            "adFormat": [{ type: core.Input },],
            "adRegion": [{ type: core.Input },],
            "display": [{ type: core.Input },],
            "width": [{ type: core.Input },],
            "height": [{ type: core.Input },],
            "layout": [{ type: core.Input },],
            "layoutKey": [{ type: core.Input },],
            "pageLevelAds": [{ type: core.Input },],
            "timeOutRetry": [{ type: core.Input },],
            "adtest": [{ type: core.Input },],
            "ins": [{ type: core.ViewChild, args: ['ins',] },],
        };
        return AdsenseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AdsenseModule = (function () {
        function AdsenseModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        AdsenseModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: AdsenseModule,
                    providers: [{ provide: ADSENSE_TOKEN, useValue: config }],
                };
            };
        AdsenseModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [AdsenseComponent],
                        declarations: [AdsenseComponent],
                    },] }
        ];
        return AdsenseModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.AdsenseComponent = AdsenseComponent;
    exports.AdsenseModule = AdsenseModule;
    exports.ADSENSE_TOKEN = ADSENSE_TOKEN;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,